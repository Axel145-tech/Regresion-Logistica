# -*- coding: utf-8 -*-
"""1_Regresion Logistica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I6BhpLFK34TsmpmjKB2RVm0cMTqWGgwk
"""

# Commented out IPython magic to ensure Python compatibility.
# Identificar Sistema Operativo de los usuarios
import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sb
# %matplotlib inline

#Leemos el archivo y lo añadimos a a la variable dataframe
dataframe = pd.read_csv(r"usuarios_win_mac_lin.csv")
dataframe.head()

#Información extadistica del dataset
dataframe.describe()

#Mostrar cantidad de usuarios
print(dataframe.groupby('clase').size())

#Visualizacion de datos
dataframe.drop(['clase'],1).hist()
plt.show()

# Sistema Operativo Windows en azul, Macintosh en verde y Linux en rojo.
sb.pairplot(dataframe.dropna(), hue='clase',size=4,vars=["duracion", "paginas","acciones","valor"],kind='reg')

#Creamos el Modelo de Regresión Logística
X = np.array(dataframe.drop(['clase'],1))
y = np.array(dataframe['clase'])
X.shape

#creamos nuestro modelo y hacemos que se ajuste (fit) a nuestro conjunto de entradas X y salidas ‘y’.
model = linear_model.LogisticRegression()
model.fit(X,y)

#Clasificar nuestro conjunto de entradas X  y revisamos algunas de sus salidas 
predictions = model.predict(X)
print(predictions)[0:5]

# Precision 
model.score(X,y)

#Validación de nuestro modelo
validation_size = 0.20
seed = 7
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X,y, test_size = validation_size, random_state = seed)

# calculamos el nuevo scoring
name='Logistic Regression'
kfold = model_selection.KFold(n_splits=10, random_state=seed)
cv_results = model_selection.cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')
msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
print(msg)

#Predicciones 
predictions = model.predict(X_validation)
print(accuracy_score(Y_validation, predictions))

#Reporte de Resultados del Modelo
print(confusion_matrix(Y_validation, predictions))

#Reporte de clasificación
print(classification_report(Y_validation, predictions))